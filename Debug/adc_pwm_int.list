
adc_pwm_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003020  08003020  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003028  08003028  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  0800303c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  0800303c  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b56  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001719  00000000  00000000  00028b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002aba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012fb6  00000000  00000000  0002b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096a0  00000000  00000000  0003e3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007846f  00000000  00000000  00047a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bfeb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000203c  00000000  00000000  000bff08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002fec 	.word	0x08002fec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002fec 	.word	0x08002fec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <HAL_IncTick>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IncTick(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
 uwTick += uwTickFreq;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_IncTick+0x30>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	001a      	movs	r2, r3
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <HAL_IncTick+0x34>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	18d2      	adds	r2, r2, r3
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_IncTick+0x34>)
 80004ba:	601a      	str	r2, [r3, #0]
 if(uwTick % 200 == 0){
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <HAL_IncTick+0x34>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	21c8      	movs	r1, #200	; 0xc8
 80004c2:	0018      	movs	r0, r3
 80004c4:	f7ff fea6 	bl	8000214 <__aeabi_uidivmod>
 80004c8:	1e0b      	subs	r3, r1, #0
 80004ca:	d102      	bne.n	80004d2 <HAL_IncTick+0x2a>
		scan = SET;
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <HAL_IncTick+0x38>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
 }
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000008 	.word	0x20000008
 80004dc:	200000cc 	.word	0x200000cc
 80004e0:	200000c4 	.word	0x200000c4

080004e4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2204      	movs	r2, #4
 80004f4:	4013      	ands	r3, r2
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	d10d      	bne.n	8000516 <HAL_ADC_ConvCpltCallback+0x32>
			vr_val = HAL_ADC_GetValue(hadc);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fcf3 	bl	8000ee8 <HAL_ADC_GetValue>
 8000502:	0003      	movs	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000508:	801a      	strh	r2, [r3, #0]
			VAL = vr_val<<4;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_ADC_ConvCpltCallback+0x3c>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	b29a      	uxth	r2, r3
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <HAL_ADC_ConvCpltCallback+0x40>)
 8000514:	801a      	strh	r2, [r3, #0]
	}
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b002      	add	sp, #8
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	200000c6 	.word	0x200000c6
 8000524:	200000c8 	.word	0x200000c8

08000528 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = VAL;
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000532:	881a      	ldrh	r2, [r3, #0]
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	200000c8 	.word	0x200000c8

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fa88 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f822 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f956 	bl	8000804 <MX_GPIO_Init>
  MX_ADC_Init();
 8000558:	f000 f86e 	bl	8000638 <MX_ADC_Init>
  MX_TIM2_Init();
 800055c:	f000 f8d2 	bl	8000704 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc);
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <main+0x44>)
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fc4e 	bl	8000e04 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <main+0x48>)
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f001 ff2f 	bl	80023d0 <HAL_TIM_PWM_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  		if(scan == SET){
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <main+0x4c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d106      	bne.n	8000588 <main+0x40>
  				scan = RESET;
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <main+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
  				HAL_ADC_Start_IT(&hadc);
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <main+0x44>)
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fc3e 	bl	8000e04 <HAL_ADC_Start_IT>
  		}
  		__NOP();
 8000588:	46c0      	nop			; (mov r8, r8)
  		if(scan == SET){
 800058a:	e7f2      	b.n	8000572 <main+0x2a>
 800058c:	20000028 	.word	0x20000028
 8000590:	20000084 	.word	0x20000084
 8000594:	200000c4 	.word	0x200000c4

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b095      	sub	sp, #84	; 0x54
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	2418      	movs	r4, #24
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	0018      	movs	r0, r3
 80005a4:	2338      	movs	r3, #56	; 0x38
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f002 fd17 	bl	8002fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	0018      	movs	r0, r3
 80005b2:	2314      	movs	r3, #20
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f002 fd10 	bl	8002fdc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <SystemClock_Config+0x98>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <SystemClock_Config+0x9c>)
 80005c2:	401a      	ands	r2, r3
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <SystemClock_Config+0x98>)
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	0109      	lsls	r1, r1, #4
 80005ca:	430a      	orrs	r2, r1
 80005cc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ce:	0021      	movs	r1, r4
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2202      	movs	r2, #2
 80005d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2210      	movs	r2, #16
 80005e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 f8b6 	bl	800175c <HAL_RCC_OscConfig>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80005f4:	f000 f91c 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	220f      	movs	r2, #15
 80005fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2201      	movs	r2, #1
 8000602:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2100      	movs	r1, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f001 fc62 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000624:	f000 f904 	bl	8000830 <Error_Handler>
  }
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b015      	add	sp, #84	; 0x54
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	40007000 	.word	0x40007000
 8000634:	ffffe7ff 	.word	0xffffe7ff

08000638 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	003b      	movs	r3, r7
 8000640:	0018      	movs	r0, r3
 8000642:	2308      	movs	r3, #8
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f002 fcc8 	bl	8002fdc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <MX_ADC_Init+0xc0>)
 800064e:	4a2b      	ldr	r2, [pc, #172]	; (80006fc <MX_ADC_Init+0xc4>)
 8000650:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <MX_ADC_Init+0xc0>)
 8000654:	2200      	movs	r2, #0
 8000656:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <MX_ADC_Init+0xc0>)
 800065a:	22c0      	movs	r2, #192	; 0xc0
 800065c:	0612      	lsls	r2, r2, #24
 800065e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <MX_ADC_Init+0xc0>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000666:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <MX_ADC_Init+0xc0>)
 8000668:	2200      	movs	r2, #0
 800066a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <MX_ADC_Init+0xc0>)
 800066e:	2201      	movs	r2, #1
 8000670:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC_Init+0xc0>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC_Init+0xc0>)
 800067a:	2220      	movs	r2, #32
 800067c:	2101      	movs	r1, #1
 800067e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC_Init+0xc0>)
 8000682:	2221      	movs	r2, #33	; 0x21
 8000684:	2100      	movs	r1, #0
 8000686:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ADC_Init+0xc0>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ADC_Init+0xc0>)
 8000690:	22c2      	movs	r2, #194	; 0xc2
 8000692:	32ff      	adds	r2, #255	; 0xff
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_ADC_Init+0xc0>)
 8000698:	222c      	movs	r2, #44	; 0x2c
 800069a:	2100      	movs	r1, #0
 800069c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_ADC_Init+0xc0>)
 80006a0:	2204      	movs	r2, #4
 80006a2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC_Init+0xc0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ADC_Init+0xc0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC_Init+0xc0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_ADC_Init+0xc0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_ADC_Init+0xc0>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fa2c 	bl	8000b1c <HAL_ADC_Init>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80006c8:	f000 f8b2 	bl	8000830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006cc:	003b      	movs	r3, r7
 80006ce:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <MX_ADC_Init+0xc8>)
 80006d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0152      	lsls	r2, r2, #5
 80006d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006da:	003a      	movs	r2, r7
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_ADC_Init+0xc0>)
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fcd9 	bl	8001098 <HAL_ADC_ConfigChannel>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006ea:	f000 f8a1 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	20000028 	.word	0x20000028
 80006fc:	40012400 	.word	0x40012400
 8000700:	04000002 	.word	0x04000002

08000704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	2318      	movs	r3, #24
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	0018      	movs	r0, r3
 8000710:	2310      	movs	r3, #16
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f002 fc61 	bl	8002fdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	2310      	movs	r3, #16
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	0018      	movs	r0, r3
 8000720:	2308      	movs	r3, #8
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f002 fc59 	bl	8002fdc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072a:	003b      	movs	r3, r7
 800072c:	0018      	movs	r0, r3
 800072e:	2310      	movs	r3, #16
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f002 fc52 	bl	8002fdc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <MX_TIM2_Init+0xf8>)
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	05d2      	lsls	r2, r2, #23
 800073e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000740:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <MX_TIM2_Init+0xf8>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_TIM2_Init+0xf8>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <MX_TIM2_Init+0xf8>)
 800074e:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <MX_TIM2_Init+0xfc>)
 8000750:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_TIM2_Init+0xf8>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <MX_TIM2_Init+0xf8>)
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_TIM2_Init+0xf8>)
 8000760:	0018      	movs	r0, r3
 8000762:	f001 fdad 	bl	80022c0 <HAL_TIM_Base_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800076a:	f000 f861 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076e:	2118      	movs	r1, #24
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	0152      	lsls	r2, r2, #5
 8000776:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000778:	187a      	adds	r2, r7, r1
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_TIM2_Init+0xf8>)
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f002 f8a6 	bl	80028d0 <HAL_TIM_ConfigClockSource>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000788:	f000 f852 	bl	8000830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_TIM2_Init+0xf8>)
 800078e:	0018      	movs	r0, r3
 8000790:	f001 fdd6 	bl	8002340 <HAL_TIM_PWM_Init>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000798:	f000 f84a 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2110      	movs	r1, #16
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_TIM2_Init+0xf8>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fb97 	bl	8002ee4 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80007ba:	f000 f839 	bl	8000830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007be:	003b      	movs	r3, r7
 80007c0:	2260      	movs	r2, #96	; 0x60
 80007c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ca:	003b      	movs	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	0039      	movs	r1, r7
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_TIM2_Init+0xf8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 ffb1 	bl	8002744 <HAL_TIM_PWM_ConfigChannel>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80007e6:	f000 f823 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <MX_TIM2_Init+0xf8>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 f89b 	bl	8000928 <HAL_TIM_MspPostInit>

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b00a      	add	sp, #40	; 0x28
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	20000084 	.word	0x20000084
 8000800:	0000ffff 	.word	0x0000ffff

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_GPIO_Init+0x28>)
 800080c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_GPIO_Init+0x28>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <MX_GPIO_Init+0x28>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40021000 	.word	0x40021000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <HAL_MspInit+0x24>)
 8000842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x24>)
 8000846:	2101      	movs	r1, #1
 8000848:	430a      	orrs	r2, r1
 800084a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <HAL_MspInit+0x24>)
 800084e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HAL_MspInit+0x24>)
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	0549      	lsls	r1, r1, #21
 8000856:	430a      	orrs	r2, r1
 8000858:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	240c      	movs	r4, #12
 800086e:	193b      	adds	r3, r7, r4
 8000870:	0018      	movs	r0, r3
 8000872:	2314      	movs	r3, #20
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f002 fbb0 	bl	8002fdc <memset>
  if(hadc->Instance==ADC1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <HAL_ADC_MspInit+0x80>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d12a      	bne.n	80008dc <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_ADC_MspInit+0x84>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_ADC_MspInit+0x84>)
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	0089      	lsls	r1, r1, #2
 8000890:	430a      	orrs	r2, r1
 8000892:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_ADC_MspInit+0x84>)
 8000896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HAL_ADC_MspInit+0x84>)
 800089a:	2101      	movs	r1, #1
 800089c:	430a      	orrs	r2, r1
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_ADC_MspInit+0x84>)
 80008a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a4:	2201      	movs	r2, #1
 80008a6:	4013      	ands	r3, r2
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2202      	movs	r2, #2
 80008b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2203      	movs	r2, #3
 80008b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	193a      	adds	r2, r7, r4
 80008c0:	23a0      	movs	r3, #160	; 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fdd2 	bl	8001470 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	200c      	movs	r0, #12
 80008d2:	f000 fd9b 	bl	800140c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80008d6:	200c      	movs	r0, #12
 80008d8:	f000 fdad 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b009      	add	sp, #36	; 0x24
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	40012400 	.word	0x40012400
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d10d      	bne.n	800091c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_TIM_Base_MspInit+0x38>)
 8000902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <HAL_TIM_Base_MspInit+0x38>)
 8000906:	2101      	movs	r1, #1
 8000908:	430a      	orrs	r2, r1
 800090a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	200f      	movs	r0, #15
 8000912:	f000 fd7b 	bl	800140c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000916:	200f      	movs	r0, #15
 8000918:	f000 fd8d 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	240c      	movs	r4, #12
 8000932:	193b      	adds	r3, r7, r4
 8000934:	0018      	movs	r0, r3
 8000936:	2314      	movs	r3, #20
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f002 fb4e 	bl	8002fdc <memset>
  if(htim->Instance==TIM2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	429a      	cmp	r2, r3
 800094a:	d122      	bne.n	8000992 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_TIM_MspPostInit+0x74>)
 800094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_TIM_MspPostInit+0x74>)
 8000952:	2101      	movs	r1, #1
 8000954:	430a      	orrs	r2, r1
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_TIM_MspPostInit+0x74>)
 800095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095c:	2201      	movs	r2, #1
 800095e:	4013      	ands	r3, r2
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000964:	0021      	movs	r1, r4
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2220      	movs	r2, #32
 800096a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2202      	movs	r2, #2
 8000970:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2205      	movs	r2, #5
 8000982:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	187a      	adds	r2, r7, r1
 8000986:	23a0      	movs	r3, #160	; 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 fd6f 	bl	8001470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b009      	add	sp, #36	; 0x24
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f7ff fd70 	bl	80004a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <ADC1_COMP_IRQHandler+0x14>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fa92 	bl	8000f00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	20000028 	.word	0x20000028

080009e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <TIM2_IRQHandler+0x14>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 fdc0 	bl	8002574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000084 	.word	0x20000084

08000a00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a36:	f7ff ffe3 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f002 faab 	bl	8002f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fd83 	bl	8000548 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
   ldr   r0, =_estack
 8000a44:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a50:	08003030 	.word	0x08003030
  ldr r2, =_sbss
 8000a54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a58:	200000d0 	.word	0x200000d0

08000a5c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <DMA1_Channel1_IRQHandler>
	...

08000a60 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_Init+0x3c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_Init+0x3c>)
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	430a      	orrs	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f811 	bl	8000aa0 <HAL_InitTick>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d003      	beq.n	8000a8a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e001      	b.n	8000a8e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a8a:	f7ff fed7 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
}
 8000a92:	0018      	movs	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_InitTick+0x5c>)
 8000aaa:	681c      	ldr	r4, [r3, #0]
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_InitTick+0x60>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	23fa      	movs	r3, #250	; 0xfa
 8000ab4:	0098      	lsls	r0, r3, #2
 8000ab6:	f7ff fb27 	bl	8000108 <__udivsi3>
 8000aba:	0003      	movs	r3, r0
 8000abc:	0019      	movs	r1, r3
 8000abe:	0020      	movs	r0, r4
 8000ac0:	f7ff fb22 	bl	8000108 <__udivsi3>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fcc5 	bl	8001456 <HAL_SYSTICK_Config>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e00f      	b.n	8000af4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d80b      	bhi.n	8000af2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2301      	movs	r3, #1
 8000ade:	425b      	negs	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 fc92 	bl	800140c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_InitTick+0x64>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b003      	add	sp, #12
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	200000cc 	.word	0x200000cc

08000b1c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e159      	b.n	8000de2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10a      	bne.n	8000b4c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2250      	movs	r2, #80	; 0x50
 8000b40:	2100      	movs	r1, #0
 8000b42:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fe8c 	bl	8000864 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b50:	2210      	movs	r2, #16
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b10      	cmp	r3, #16
 8000b56:	d005      	beq.n	8000b64 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b62:	d00b      	beq.n	8000b7c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b68:	2210      	movs	r2, #16
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2250      	movs	r2, #80	; 0x50
 8000b74:	2100      	movs	r1, #0
 8000b76:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e132      	b.n	8000de2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b80:	4a9a      	ldr	r2, [pc, #616]	; (8000dec <HAL_ADC_Init+0x2d0>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	2202      	movs	r2, #2
 8000b86:	431a      	orrs	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	2203      	movs	r2, #3
 8000b94:	4013      	ands	r3, r2
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d108      	bne.n	8000bac <HAL_ADC_Init+0x90>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d101      	bne.n	8000bac <HAL_ADC_Init+0x90>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <HAL_ADC_Init+0x92>
 8000bac:	2300      	movs	r3, #0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d149      	bne.n	8000c46 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	23c0      	movs	r3, #192	; 0xc0
 8000bb8:	061b      	lsls	r3, r3, #24
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d00b      	beq.n	8000bd6 <HAL_ADC_Init+0xba>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d005      	beq.n	8000bd6 <HAL_ADC_Init+0xba>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	061b      	lsls	r3, r3, #24
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d111      	bne.n	8000bfa <HAL_ADC_Init+0xde>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	0892      	lsrs	r2, r2, #2
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6919      	ldr	r1, [r3, #16]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	e014      	b.n	8000c24 <HAL_ADC_Init+0x108>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	691a      	ldr	r2, [r3, #16]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	0892      	lsrs	r2, r2, #2
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	4b79      	ldr	r3, [pc, #484]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b78      	ldr	r3, [pc, #480]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c10:	4978      	ldr	r1, [pc, #480]	; (8000df4 <HAL_ADC_Init+0x2d8>)
 8000c12:	400a      	ands	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	4b76      	ldr	r3, [pc, #472]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c18:	6819      	ldr	r1, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4b74      	ldr	r3, [pc, #464]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2118      	movs	r1, #24
 8000c30:	438a      	bics	r2, r1
 8000c32:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68d9      	ldr	r1, [r3, #12]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000c46:	4b6a      	ldr	r3, [pc, #424]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b69      	ldr	r3, [pc, #420]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c4c:	496a      	ldr	r1, [pc, #424]	; (8000df8 <HAL_ADC_Init+0x2dc>)
 8000c4e:	400a      	ands	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000c52:	4b67      	ldr	r3, [pc, #412]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c54:	6819      	ldr	r1, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	065a      	lsls	r2, r3, #25
 8000c5c:	4b64      	ldr	r3, [pc, #400]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	055b      	lsls	r3, r3, #21
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d108      	bne.n	8000c82 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	0549      	lsls	r1, r1, #21
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	495b      	ldr	r1, [pc, #364]	; (8000dfc <HAL_ADC_Init+0x2e0>)
 8000c8e:	400a      	ands	r2, r1
 8000c90:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68d9      	ldr	r1, [r3, #12]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d101      	bne.n	8000ca8 <HAL_ADC_Init+0x18c>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	e000      	b.n	8000caa <HAL_ADC_Init+0x18e>
 8000ca8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000caa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2020      	movs	r0, #32
 8000cb0:	5c1b      	ldrb	r3, [r3, r0]
 8000cb2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000cb4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	202c      	movs	r0, #44	; 0x2c
 8000cba:	5c1b      	ldrb	r3, [r3, r0]
 8000cbc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cbe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000cc4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000ccc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000cd4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce2:	23c2      	movs	r3, #194	; 0xc2
 8000ce4:	33ff      	adds	r3, #255	; 0xff
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d00b      	beq.n	8000d02 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68d9      	ldr	r1, [r3, #12]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2221      	movs	r2, #33	; 0x21
 8000d06:	5c9b      	ldrb	r3, [r3, r2]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d11a      	bne.n	8000d42 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2220      	movs	r2, #32
 8000d10:	5c9b      	ldrb	r3, [r3, r2]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d109      	bne.n	8000d2a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	0249      	lsls	r1, r1, #9
 8000d24:	430a      	orrs	r2, r1
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	e00b      	b.n	8000d42 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2e:	2220      	movs	r2, #32
 8000d30:	431a      	orrs	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d11f      	bne.n	8000d8a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	492a      	ldr	r1, [pc, #168]	; (8000e00 <HAL_ADC_Init+0x2e4>)
 8000d56:	400a      	ands	r2, r1
 8000d58:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6919      	ldr	r1, [r3, #16]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000d68:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000d6e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2101      	movs	r1, #1
 8000d84:	430a      	orrs	r2, r1
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	e00e      	b.n	8000da8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	2201      	movs	r2, #1
 8000d92:	4013      	ands	r3, r2
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d107      	bne.n	8000da8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2101      	movs	r1, #1
 8000da4:	438a      	bics	r2, r1
 8000da6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2107      	movs	r1, #7
 8000db4:	438a      	bics	r2, r1
 8000db6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6959      	ldr	r1, [r3, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	4393      	bics	r3, r2
 8000dd8:	2201      	movs	r2, #1
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	fffffefd 	.word	0xfffffefd
 8000df0:	40012708 	.word	0x40012708
 8000df4:	ffc3ffff 	.word	0xffc3ffff
 8000df8:	fdffffff 	.word	0xfdffffff
 8000dfc:	fffe0219 	.word	0xfffe0219
 8000e00:	fffffc03 	.word	0xfffffc03

08000e04 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d156      	bne.n	8000ece <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2250      	movs	r2, #80	; 0x50
 8000e24:	5c9b      	ldrb	r3, [r3, r2]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d101      	bne.n	8000e2e <HAL_ADC_Start_IT+0x2a>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e056      	b.n	8000edc <HAL_ADC_Start_IT+0xd8>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2250      	movs	r2, #80	; 0x50
 8000e32:	2101      	movs	r1, #1
 8000e34:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d007      	beq.n	8000e4e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e3e:	230f      	movs	r3, #15
 8000e40:	18fc      	adds	r4, r7, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	0018      	movs	r0, r3
 8000e46:	f000 f9ad 	bl	80011a4 <ADC_Enable>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e4e:	230f      	movs	r3, #15
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d13e      	bne.n	8000ed6 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5c:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <HAL_ADC_Start_IT+0xe0>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	0052      	lsls	r2, r2, #1
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2250      	movs	r2, #80	; 0x50
 8000e74:	2100      	movs	r1, #0
 8000e76:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	221c      	movs	r2, #28
 8000e7e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d110      	bne.n	8000eaa <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2104      	movs	r1, #4
 8000e94:	438a      	bics	r2, r1
 8000e96:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2118      	movs	r1, #24
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	605a      	str	r2, [r3, #4]
          break;
 8000ea8:	e008      	b.n	8000ebc <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	211c      	movs	r1, #28
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	605a      	str	r2, [r3, #4]
          break;
 8000eba:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	e003      	b.n	8000ed6 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ece:	230f      	movs	r3, #15
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	781b      	ldrb	r3, [r3, #0]
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b005      	add	sp, #20
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	fffff0fe 	.word	0xfffff0fe

08000ee8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2204      	movs	r2, #4
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d106      	bne.n	8000f24 <HAL_ADC_IRQHandler+0x24>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00d      	beq.n	8000f40 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d154      	bne.n	8000fdc <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2208      	movs	r2, #8
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d14d      	bne.n	8000fdc <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f44:	2210      	movs	r2, #16
 8000f46:	4013      	ands	r3, r2
 8000f48:	d106      	bne.n	8000f58 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	23c0      	movs	r3, #192	; 0xc0
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	4013      	ands	r3, r2
 8000f64:	d12e      	bne.n	8000fc4 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2220      	movs	r2, #32
 8000f6a:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d129      	bne.n	8000fc4 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2208      	movs	r2, #8
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d122      	bne.n	8000fc4 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2204      	movs	r2, #4
 8000f86:	4013      	ands	r3, r2
 8000f88:	d110      	bne.n	8000fac <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	210c      	movs	r1, #12
 8000f96:	438a      	bics	r2, r1
 8000f98:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9e:	4a35      	ldr	r2, [pc, #212]	; (8001074 <HAL_ADC_IRQHandler+0x174>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	655a      	str	r2, [r3, #84]	; 0x54
 8000faa:	e00b      	b.n	8000fc4 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff fa8c 	bl	80004e4 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d003      	beq.n	8000fdc <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	220c      	movs	r2, #12
 8000fda:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b80      	cmp	r3, #128	; 0x80
 8000fe8:	d115      	bne.n	8001016 <HAL_ADC_IRQHandler+0x116>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b80      	cmp	r3, #128	; 0x80
 8000ff6:	d10e      	bne.n	8001016 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	0252      	lsls	r2, r2, #9
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	0018      	movs	r0, r3
 800100a:	f000 f835 	bl	8001078 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2210      	movs	r2, #16
 800101e:	4013      	ands	r3, r2
 8001020:	2b10      	cmp	r3, #16
 8001022:	d123      	bne.n	800106c <HAL_ADC_IRQHandler+0x16c>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2210      	movs	r2, #16
 800102c:	4013      	ands	r3, r2
 800102e:	2b10      	cmp	r3, #16
 8001030:	d11c      	bne.n	800106c <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2201      	movs	r2, #1
 8001042:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001044:	2b01      	cmp	r3, #1
 8001046:	d10d      	bne.n	8001064 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104c:	2202      	movs	r2, #2
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2210      	movs	r2, #16
 800105a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0018      	movs	r0, r3
 8001060:	f000 f812 	bl	8001088 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2210      	movs	r2, #16
 800106a:	601a      	str	r2, [r3, #0]
  }
  
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}
 8001074:	fffffefe 	.word	0xfffffefe

08001078 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2250      	movs	r2, #80	; 0x50
 80010a6:	5c9b      	ldrb	r3, [r3, r2]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x18>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e06c      	b.n	800118a <HAL_ADC_ConfigChannel+0xf2>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2250      	movs	r2, #80	; 0x50
 80010b4:	2101      	movs	r1, #1
 80010b6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2204      	movs	r2, #4
 80010c0:	4013      	ands	r3, r2
 80010c2:	d00b      	beq.n	80010dc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c8:	2220      	movs	r2, #32
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2250      	movs	r2, #80	; 0x50
 80010d4:	2100      	movs	r1, #0
 80010d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e056      	b.n	800118a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a2c      	ldr	r2, [pc, #176]	; (8001194 <HAL_ADC_ConfigChannel+0xfc>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d028      	beq.n	8001138 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	035b      	lsls	r3, r3, #13
 80010f2:	0b5a      	lsrs	r2, r3, #13
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	02db      	lsls	r3, r3, #11
 8001104:	4013      	ands	r3, r2
 8001106:	d009      	beq.n	800111c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_ADC_ConfigChannel+0x100>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_ADC_ConfigChannel+0x100>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0409      	lsls	r1, r1, #16
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001116:	200a      	movs	r0, #10
 8001118:	f000 f8ac 	bl	8001274 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	d02b      	beq.n	8001180 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_ADC_ConfigChannel+0x100>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_ADC_ConfigChannel+0x100>)
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	03c9      	lsls	r1, r1, #15
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e023      	b.n	8001180 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	035b      	lsls	r3, r3, #13
 8001144:	0b5b      	lsrs	r3, r3, #13
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	400a      	ands	r2, r1
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	02db      	lsls	r3, r3, #11
 8001158:	4013      	ands	r3, r2
 800115a:	d005      	beq.n	8001168 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_ADC_ConfigChannel+0x100>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_ADC_ConfigChannel+0x100>)
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <HAL_ADC_ConfigChannel+0x104>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	4013      	ands	r3, r2
 8001172:	d005      	beq.n	8001180 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_ADC_ConfigChannel+0x100>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_ADC_ConfigChannel+0x100>)
 800117a:	4909      	ldr	r1, [pc, #36]	; (80011a0 <HAL_ADC_ConfigChannel+0x108>)
 800117c:	400a      	ands	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2250      	movs	r2, #80	; 0x50
 8001184:	2100      	movs	r1, #0
 8001186:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	00001001 	.word	0x00001001
 8001198:	40012708 	.word	0x40012708
 800119c:	ff7fffff 	.word	0xff7fffff
 80011a0:	ffbfffff 	.word	0xffbfffff

080011a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2203      	movs	r2, #3
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <ADC_Enable+0x2c>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <ADC_Enable+0x2c>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <ADC_Enable+0x2e>
 80011d0:	2300      	movs	r3, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d146      	bne.n	8001264 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a24      	ldr	r2, [pc, #144]	; (8001270 <ADC_Enable+0xcc>)
 80011de:	4013      	ands	r3, r2
 80011e0:	d00d      	beq.n	80011fe <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e6:	2210      	movs	r2, #16
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	2201      	movs	r2, #1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e033      	b.n	8001266 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	430a      	orrs	r2, r1
 800120c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800120e:	2001      	movs	r0, #1
 8001210:	f000 f830 	bl	8001274 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001214:	f7ff fc78 	bl	8000b08 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800121c:	e01b      	b.n	8001256 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800121e:	f7ff fc73 	bl	8000b08 <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b0a      	cmp	r3, #10
 800122a:	d914      	bls.n	8001256 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	4013      	ands	r3, r2
 8001236:	2b01      	cmp	r3, #1
 8001238:	d00d      	beq.n	8001256 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	2210      	movs	r2, #16
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	2201      	movs	r2, #1
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e007      	b.n	8001266 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	2b01      	cmp	r3, #1
 8001262:	d1dc      	bne.n	800121e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b004      	add	sp, #16
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	80000017 	.word	0x80000017

08001274 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <ADC_DelayMicroSecond+0x38>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	490b      	ldr	r1, [pc, #44]	; (80012b0 <ADC_DelayMicroSecond+0x3c>)
 8001282:	0018      	movs	r0, r3
 8001284:	f7fe ff40 	bl	8000108 <__udivsi3>
 8001288:	0003      	movs	r3, r0
 800128a:	001a      	movs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4353      	muls	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001292:	e002      	b.n	800129a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3b01      	subs	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f9      	bne.n	8001294 <ADC_DelayMicroSecond+0x20>
  } 
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	20000000 	.word	0x20000000
 80012b0:	000f4240 	.word	0x000f4240

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	0002      	movs	r2, r0
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d809      	bhi.n	80012dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	001a      	movs	r2, r3
 80012ce:	231f      	movs	r3, #31
 80012d0:	401a      	ands	r2, r3
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_EnableIRQ+0x30>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	4091      	lsls	r1, r2
 80012d8:	000a      	movs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
  }
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	0002      	movs	r2, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b7f      	cmp	r3, #127	; 0x7f
 80012fc:	d828      	bhi.n	8001350 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012fe:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <__NVIC_SetPriority+0xd4>)
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b25b      	sxtb	r3, r3
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	33c0      	adds	r3, #192	; 0xc0
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	589b      	ldr	r3, [r3, r2]
 800130e:	1dfa      	adds	r2, r7, #7
 8001310:	7812      	ldrb	r2, [r2, #0]
 8001312:	0011      	movs	r1, r2
 8001314:	2203      	movs	r2, #3
 8001316:	400a      	ands	r2, r1
 8001318:	00d2      	lsls	r2, r2, #3
 800131a:	21ff      	movs	r1, #255	; 0xff
 800131c:	4091      	lsls	r1, r2
 800131e:	000a      	movs	r2, r1
 8001320:	43d2      	mvns	r2, r2
 8001322:	401a      	ands	r2, r3
 8001324:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	019b      	lsls	r3, r3, #6
 800132a:	22ff      	movs	r2, #255	; 0xff
 800132c:	401a      	ands	r2, r3
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	0018      	movs	r0, r3
 8001334:	2303      	movs	r3, #3
 8001336:	4003      	ands	r3, r0
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133c:	481f      	ldr	r0, [pc, #124]	; (80013bc <__NVIC_SetPriority+0xd4>)
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b25b      	sxtb	r3, r3
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	430a      	orrs	r2, r1
 8001348:	33c0      	adds	r3, #192	; 0xc0
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800134e:	e031      	b.n	80013b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <__NVIC_SetPriority+0xd8>)
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	0019      	movs	r1, r3
 8001358:	230f      	movs	r3, #15
 800135a:	400b      	ands	r3, r1
 800135c:	3b08      	subs	r3, #8
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3306      	adds	r3, #6
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	18d3      	adds	r3, r2, r3
 8001366:	3304      	adds	r3, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1dfa      	adds	r2, r7, #7
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	0011      	movs	r1, r2
 8001370:	2203      	movs	r2, #3
 8001372:	400a      	ands	r2, r1
 8001374:	00d2      	lsls	r2, r2, #3
 8001376:	21ff      	movs	r1, #255	; 0xff
 8001378:	4091      	lsls	r1, r2
 800137a:	000a      	movs	r2, r1
 800137c:	43d2      	mvns	r2, r2
 800137e:	401a      	ands	r2, r3
 8001380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	019b      	lsls	r3, r3, #6
 8001386:	22ff      	movs	r2, #255	; 0xff
 8001388:	401a      	ands	r2, r3
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	0018      	movs	r0, r3
 8001390:	2303      	movs	r3, #3
 8001392:	4003      	ands	r3, r0
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <__NVIC_SetPriority+0xd8>)
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	001c      	movs	r4, r3
 80013a0:	230f      	movs	r3, #15
 80013a2:	4023      	ands	r3, r4
 80013a4:	3b08      	subs	r3, #8
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	430a      	orrs	r2, r1
 80013aa:	3306      	adds	r3, #6
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	18c3      	adds	r3, r0, r3
 80013b0:	3304      	adds	r3, #4
 80013b2:	601a      	str	r2, [r3, #0]
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b003      	add	sp, #12
 80013ba:	bd90      	pop	{r4, r7, pc}
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	1e5a      	subs	r2, r3, #1
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	045b      	lsls	r3, r3, #17
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d301      	bcc.n	80013dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d8:	2301      	movs	r3, #1
 80013da:	e010      	b.n	80013fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <SysTick_Config+0x44>)
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	3a01      	subs	r2, #1
 80013e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e4:	2301      	movs	r3, #1
 80013e6:	425b      	negs	r3, r3
 80013e8:	2103      	movs	r1, #3
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7ff ff7c 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x44>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x44>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	210f      	movs	r1, #15
 8001418:	187b      	adds	r3, r7, r1
 800141a:	1c02      	adds	r2, r0, #0
 800141c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	187b      	adds	r3, r7, r1
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b25b      	sxtb	r3, r3
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff ff5d 	bl	80012e8 <__NVIC_SetPriority>
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	0002      	movs	r2, r0
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b25b      	sxtb	r3, r3
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff ff33 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ffaf 	bl	80013c4 <SysTick_Config>
 8001466:	0003      	movs	r3, r0
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001486:	e14f      	b.n	8001728 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d100      	bne.n	80014a0 <HAL_GPIO_Init+0x30>
 800149e:	e140      	b.n	8001722 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2203      	movs	r2, #3
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d005      	beq.n	80014b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	409a      	lsls	r2, r3
 80014da:	0013      	movs	r3, r2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	2201      	movs	r2, #1
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	4013      	ands	r3, r2
 8001522:	2b03      	cmp	r3, #3
 8001524:	d017      	beq.n	8001556 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	4013      	ands	r3, r2
 800155e:	2b02      	cmp	r3, #2
 8001560:	d123      	bne.n	80015aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	58d3      	ldr	r3, [r2, r3]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2207      	movs	r2, #7
 8001574:	4013      	ands	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2107      	movs	r1, #7
 800158e:	400b      	ands	r3, r1
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2203      	movs	r2, #3
 80015c8:	401a      	ands	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	029b      	lsls	r3, r3, #10
 80015e6:	4013      	ands	r3, r2
 80015e8:	d100      	bne.n	80015ec <HAL_GPIO_Init+0x17c>
 80015ea:	e09a      	b.n	8001722 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	4b54      	ldr	r3, [pc, #336]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80015ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	430a      	orrs	r2, r1
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f8:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_GPIO_Init+0x2d4>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	589b      	ldr	r3, [r3, r2]
 8001604:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2203      	movs	r2, #3
 800160a:	4013      	ands	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	409a      	lsls	r2, r3
 8001612:	0013      	movs	r3, r2
 8001614:	43da      	mvns	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	429a      	cmp	r2, r3
 8001624:	d019      	beq.n	800165a <HAL_GPIO_Init+0x1ea>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a47      	ldr	r2, [pc, #284]	; (8001748 <HAL_GPIO_Init+0x2d8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x1e6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a46      	ldr	r2, [pc, #280]	; (800174c <HAL_GPIO_Init+0x2dc>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x1e2>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a45      	ldr	r2, [pc, #276]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x1de>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a44      	ldr	r2, [pc, #272]	; (8001754 <HAL_GPIO_Init+0x2e4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x1da>
 8001646:	2305      	movs	r3, #5
 8001648:	e008      	b.n	800165c <HAL_GPIO_Init+0x1ec>
 800164a:	2306      	movs	r3, #6
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x1ec>
 800164e:	2303      	movs	r3, #3
 8001650:	e004      	b.n	800165c <HAL_GPIO_Init+0x1ec>
 8001652:	2302      	movs	r3, #2
 8001654:	e002      	b.n	800165c <HAL_GPIO_Init+0x1ec>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_GPIO_Init+0x1ec>
 800165a:	2300      	movs	r3, #0
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	2103      	movs	r1, #3
 8001660:	400a      	ands	r2, r1
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	4093      	lsls	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800166c:	4935      	ldr	r1, [pc, #212]	; (8001744 <HAL_GPIO_Init+0x2d4>)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	025b      	lsls	r3, r3, #9
 8001692:	4013      	ands	r3, r2
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43da      	mvns	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	4013      	ands	r3, r2
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43da      	mvns	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	035b      	lsls	r3, r3, #13
 80016e6:	4013      	ands	r3, r2
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43da      	mvns	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	039b      	lsls	r3, r3, #14
 8001710:	4013      	ands	r3, r2
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	40da      	lsrs	r2, r3
 8001730:	1e13      	subs	r3, r2, #0
 8001732:	d000      	beq.n	8001736 <HAL_GPIO_Init+0x2c6>
 8001734:	e6a8      	b.n	8001488 <HAL_GPIO_Init+0x18>
  }
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b006      	add	sp, #24
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	50000400 	.word	0x50000400
 800174c:	50000800 	.word	0x50000800
 8001750:	50000c00 	.word	0x50000c00
 8001754:	50001c00 	.word	0x50001c00
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	f000 fbaf 	bl	8001ece <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001770:	4bcf      	ldr	r3, [pc, #828]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	220c      	movs	r2, #12
 8001776:	4013      	ands	r3, r2
 8001778:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800177a:	4bcd      	ldr	r3, [pc, #820]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	4013      	ands	r3, r2
 8001784:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	d100      	bne.n	8001792 <HAL_RCC_OscConfig+0x36>
 8001790:	e07e      	b.n	8001890 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d007      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d112      	bne.n	80017c4 <HAL_RCC_OscConfig+0x68>
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d10d      	bne.n	80017c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	4bc1      	ldr	r3, [pc, #772]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	029b      	lsls	r3, r3, #10
 80017b0:	4013      	ands	r3, r2
 80017b2:	d100      	bne.n	80017b6 <HAL_RCC_OscConfig+0x5a>
 80017b4:	e06b      	b.n	800188e <HAL_RCC_OscConfig+0x132>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d167      	bne.n	800188e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	f000 fb85 	bl	8001ece <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	025b      	lsls	r3, r3, #9
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x84>
 80017d0:	4bb7      	ldr	r3, [pc, #732]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4bb6      	ldr	r3, [pc, #728]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	0249      	lsls	r1, r1, #9
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	e027      	b.n	8001830 <HAL_RCC_OscConfig+0xd4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	23a0      	movs	r3, #160	; 0xa0
 80017e6:	02db      	lsls	r3, r3, #11
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d10e      	bne.n	800180a <HAL_RCC_OscConfig+0xae>
 80017ec:	4bb0      	ldr	r3, [pc, #704]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4baf      	ldr	r3, [pc, #700]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	02c9      	lsls	r1, r1, #11
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	4bad      	ldr	r3, [pc, #692]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4bac      	ldr	r3, [pc, #688]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0249      	lsls	r1, r1, #9
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e012      	b.n	8001830 <HAL_RCC_OscConfig+0xd4>
 800180a:	4ba9      	ldr	r3, [pc, #676]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4ba8      	ldr	r3, [pc, #672]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001810:	49a8      	ldr	r1, [pc, #672]	; (8001ab4 <HAL_RCC_OscConfig+0x358>)
 8001812:	400a      	ands	r2, r1
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	4ba6      	ldr	r3, [pc, #664]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4013      	ands	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4ba2      	ldr	r3, [pc, #648]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4ba1      	ldr	r3, [pc, #644]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 800182a:	49a3      	ldr	r1, [pc, #652]	; (8001ab8 <HAL_RCC_OscConfig+0x35c>)
 800182c:	400a      	ands	r2, r1
 800182e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d015      	beq.n	8001864 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff f966 	bl	8000b08 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001840:	e009      	b.n	8001856 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001842:	f7ff f961 	bl	8000b08 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b64      	cmp	r3, #100	; 0x64
 800184e:	d902      	bls.n	8001856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	f000 fb3c 	bl	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001856:	4b96      	ldr	r3, [pc, #600]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	029b      	lsls	r3, r3, #10
 800185e:	4013      	ands	r3, r2
 8001860:	d0ef      	beq.n	8001842 <HAL_RCC_OscConfig+0xe6>
 8001862:	e015      	b.n	8001890 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff f950 	bl	8000b08 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186e:	f7ff f94b 	bl	8000b08 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b64      	cmp	r3, #100	; 0x64
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e326      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001880:	4b8b      	ldr	r3, [pc, #556]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	029b      	lsls	r3, r3, #10
 8001888:	4013      	ands	r3, r2
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x112>
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	d100      	bne.n	800189c <HAL_RCC_OscConfig+0x140>
 800189a:	e08b      	b.n	80019b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d13e      	bne.n	800192c <HAL_RCC_OscConfig+0x1d0>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d13b      	bne.n	800192c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80018b4:	4b7e      	ldr	r3, [pc, #504]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2204      	movs	r2, #4
 80018ba:	4013      	ands	r3, r2
 80018bc:	d004      	beq.n	80018c8 <HAL_RCC_OscConfig+0x16c>
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e302      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b79      	ldr	r3, [pc, #484]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a7b      	ldr	r2, [pc, #492]	; (8001abc <HAL_RCC_OscConfig+0x360>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	021a      	lsls	r2, r3, #8
 80018d8:	4b75      	ldr	r3, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80018da:	430a      	orrs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80018de:	4b74      	ldr	r3, [pc, #464]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2209      	movs	r2, #9
 80018e4:	4393      	bics	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	4b71      	ldr	r3, [pc, #452]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f0:	f000 fc40 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 80018f4:	0001      	movs	r1, r0
 80018f6:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	220f      	movs	r2, #15
 80018fe:	4013      	ands	r3, r2
 8001900:	4a6f      	ldr	r2, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x364>)
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	000a      	movs	r2, r1
 8001906:	40da      	lsrs	r2, r3
 8001908:	4b6e      	ldr	r3, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x368>)
 800190a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800190c:	4b6e      	ldr	r3, [pc, #440]	; (8001ac8 <HAL_RCC_OscConfig+0x36c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2513      	movs	r5, #19
 8001912:	197c      	adds	r4, r7, r5
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff f8c3 	bl	8000aa0 <HAL_InitTick>
 800191a:	0003      	movs	r3, r0
 800191c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800191e:	197b      	adds	r3, r7, r5
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d046      	beq.n	80019b4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001926:	197b      	adds	r3, r7, r5
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	e2d0      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d027      	beq.n	8001982 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2209      	movs	r2, #9
 8001938:	4393      	bics	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff f8e0 	bl	8000b08 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194e:	f7ff f8db 	bl	8000b08 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e2b6      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2204      	movs	r2, #4
 8001966:	4013      	ands	r3, r2
 8001968:	d0f1      	beq.n	800194e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4a53      	ldr	r2, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x360>)
 8001970:	4013      	ands	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	021a      	lsls	r2, r3, #8
 800197a:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 800197c:	430a      	orrs	r2, r1
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	e018      	b.n	80019b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001982:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001988:	2101      	movs	r1, #1
 800198a:	438a      	bics	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff f8bb 	bl	8000b08 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff f8b6 	bl	8000b08 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e291      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	d1f1      	bne.n	8001998 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2210      	movs	r2, #16
 80019ba:	4013      	ands	r3, r2
 80019bc:	d100      	bne.n	80019c0 <HAL_RCC_OscConfig+0x264>
 80019be:	e0a1      	b.n	8001b04 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d140      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x282>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e277      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a3a      	ldr	r2, [pc, #232]	; (8001acc <HAL_RCC_OscConfig+0x370>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	0a19      	lsrs	r1, r3, #8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	061a      	lsls	r2, r3, #24
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	0b5b      	lsrs	r3, r3, #13
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	0212      	lsls	r2, r2, #8
 8001a12:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	4928      	ldr	r1, [pc, #160]	; (8001ac0 <HAL_RCC_OscConfig+0x364>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x368>)
 8001a26:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x36c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2513      	movs	r5, #19
 8001a2e:	197c      	adds	r4, r7, r5
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff f835 	bl	8000aa0 <HAL_InitTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a3a:	197b      	adds	r3, r7, r5
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d060      	beq.n	8001b04 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001a42:	197b      	adds	r3, r7, r5
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	e242      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d03f      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	0049      	lsls	r1, r1, #1
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f853 	bl	8000b08 <HAL_GetTick>
 8001a62:	0003      	movs	r3, r0
 8001a64:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a68:	f7ff f84e 	bl	8000b08 <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e229      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4013      	ands	r3, r2
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <HAL_RCC_OscConfig+0x370>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	0a19      	lsrs	r1, r3, #8
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	061a      	lsls	r2, r3, #24
 8001aa8:	4b01      	ldr	r3, [pc, #4]	; (8001ab0 <HAL_RCC_OscConfig+0x354>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	e029      	b.n	8001b04 <HAL_RCC_OscConfig+0x3a8>
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	fffeffff 	.word	0xfffeffff
 8001ab8:	fffbffff 	.word	0xfffbffff
 8001abc:	ffffe0ff 	.word	0xffffe0ff
 8001ac0:	08003004 	.word	0x08003004
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ad0:	4bbd      	ldr	r3, [pc, #756]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4bbc      	ldr	r3, [pc, #752]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001ad6:	49bd      	ldr	r1, [pc, #756]	; (8001dcc <HAL_RCC_OscConfig+0x670>)
 8001ad8:	400a      	ands	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff f814 	bl	8000b08 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f80f 	bl	8000b08 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1ea      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001af8:	4bb3      	ldr	r3, [pc, #716]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d036      	beq.n	8001b7c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d019      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b16:	4bac      	ldr	r3, [pc, #688]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b1a:	4bab      	ldr	r3, [pc, #684]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7fe fff1 	bl	8000b08 <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7fe ffec 	bl	8000b08 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1c7      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b3e:	4ba2      	ldr	r3, [pc, #648]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d0f1      	beq.n	8001b2c <HAL_RCC_OscConfig+0x3d0>
 8001b48:	e018      	b.n	8001b7c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4a:	4b9f      	ldr	r3, [pc, #636]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b4e:	4b9e      	ldr	r3, [pc, #632]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	438a      	bics	r2, r1
 8001b54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b56:	f7fe ffd7 	bl	8000b08 <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b60:	f7fe ffd2 	bl	8000b08 <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1ad      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b72:	4b95      	ldr	r3, [pc, #596]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d1f1      	bne.n	8001b60 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2204      	movs	r2, #4
 8001b82:	4013      	ands	r3, r2
 8001b84:	d100      	bne.n	8001b88 <HAL_RCC_OscConfig+0x42c>
 8001b86:	e0ae      	b.n	8001ce6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b88:	2027      	movs	r0, #39	; 0x27
 8001b8a:	183b      	adds	r3, r7, r0
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b90:	4b8d      	ldr	r3, [pc, #564]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	055b      	lsls	r3, r3, #21
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d109      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	4b8a      	ldr	r3, [pc, #552]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba0:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	0549      	lsls	r1, r1, #21
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001baa:	183b      	adds	r3, r7, r0
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	4b87      	ldr	r3, [pc, #540]	; (8001dd0 <HAL_RCC_OscConfig+0x674>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d11a      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbc:	4b84      	ldr	r3, [pc, #528]	; (8001dd0 <HAL_RCC_OscConfig+0x674>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b83      	ldr	r3, [pc, #524]	; (8001dd0 <HAL_RCC_OscConfig+0x674>)
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	0049      	lsls	r1, r1, #1
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bca:	f7fe ff9d 	bl	8000b08 <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd4:	f7fe ff98 	bl	8000b08 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e173      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x674>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_OscConfig+0x4b2>
 8001bfe:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c02:	4b71      	ldr	r3, [pc, #452]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	0049      	lsls	r1, r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	651a      	str	r2, [r3, #80]	; 0x50
 8001c0c:	e031      	b.n	8001c72 <HAL_RCC_OscConfig+0x516>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4d4>
 8001c16:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c1a:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c1c:	496b      	ldr	r1, [pc, #428]	; (8001dcc <HAL_RCC_OscConfig+0x670>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	651a      	str	r2, [r3, #80]	; 0x50
 8001c22:	4b69      	ldr	r3, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c26:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c28:	496a      	ldr	r1, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x678>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	651a      	str	r2, [r3, #80]	; 0x50
 8001c2e:	e020      	b.n	8001c72 <HAL_RCC_OscConfig+0x516>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	23a0      	movs	r3, #160	; 0xa0
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10e      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4fe>
 8001c3c:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c40:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	00c9      	lsls	r1, r1, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	651a      	str	r2, [r3, #80]	; 0x50
 8001c4a:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4e:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0049      	lsls	r1, r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	651a      	str	r2, [r3, #80]	; 0x50
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x516>
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c60:	495a      	ldr	r1, [pc, #360]	; (8001dcc <HAL_RCC_OscConfig+0x670>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	651a      	str	r2, [r3, #80]	; 0x50
 8001c66:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c6c:	4959      	ldr	r1, [pc, #356]	; (8001dd4 <HAL_RCC_OscConfig+0x678>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d015      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe ff45 	bl	8000b08 <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c82:	e009      	b.n	8001c98 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7fe ff40 	bl	8000b08 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	4a52      	ldr	r2, [pc, #328]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e11a      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d0ef      	beq.n	8001c84 <HAL_RCC_OscConfig+0x528>
 8001ca4:	e014      	b.n	8001cd0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7fe ff2f 	bl	8000b08 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cae:	e009      	b.n	8001cc4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f7fe ff2a 	bl	8000b08 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	4a47      	ldr	r2, [pc, #284]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e104      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d1ef      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cd0:	2327      	movs	r3, #39	; 0x27
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001ce0:	493e      	ldr	r1, [pc, #248]	; (8001ddc <HAL_RCC_OscConfig+0x680>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2220      	movs	r2, #32
 8001cec:	4013      	ands	r3, r2
 8001cee:	d049      	beq.n	8001d84 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d026      	beq.n	8001d46 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001cf8:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_RCC_OscConfig+0x684>)
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_RCC_OscConfig+0x684>)
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	0189      	lsls	r1, r1, #6
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7fe fef3 	bl	8000b08 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d28:	f7fe feee 	bl	8000b08 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0c9      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d0f1      	beq.n	8001d28 <HAL_RCC_OscConfig+0x5cc>
 8001d44:	e01e      	b.n	8001d84 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	438a      	bics	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_RCC_OscConfig+0x684>)
 8001d54:	6a1a      	ldr	r2, [r3, #32]
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_RCC_OscConfig+0x684>)
 8001d58:	4922      	ldr	r1, [pc, #136]	; (8001de4 <HAL_RCC_OscConfig+0x688>)
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fed3 	bl	8000b08 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d68:	f7fe fece 	bl	8000b08 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0a9      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	d1f1      	bne.n	8001d68 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d100      	bne.n	8001d8e <HAL_RCC_OscConfig+0x632>
 8001d8c:	e09e      	b.n	8001ecc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d100      	bne.n	8001d96 <HAL_RCC_OscConfig+0x63a>
 8001d94:	e077      	b.n	8001e86 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d158      	bne.n	8001e50 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_OscConfig+0x66c>)
 8001da4:	4910      	ldr	r1, [pc, #64]	; (8001de8 <HAL_RCC_OscConfig+0x68c>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7fe fead 	bl	8000b08 <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001db2:	e01b      	b.n	8001dec <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe fea8 	bl	8000b08 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d914      	bls.n	8001dec <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e083      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	fffffeff 	.word	0xfffffeff
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	fffffbff 	.word	0xfffffbff
 8001dd8:	00001388 	.word	0x00001388
 8001ddc:	efffffff 	.word	0xefffffff
 8001de0:	40010000 	.word	0x40010000
 8001de4:	ffffdfff 	.word	0xffffdfff
 8001de8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dec:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	049b      	lsls	r3, r3, #18
 8001df4:	4013      	ands	r3, r2
 8001df6:	d1dd      	bne.n	8001db4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4a37      	ldr	r2, [pc, #220]	; (8001edc <HAL_RCC_OscConfig+0x780>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	431a      	orrs	r2, r3
 8001e12:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	0449      	lsls	r1, r1, #17
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7fe fe6f 	bl	8000b08 <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e30:	f7fe fe6a 	bl	8000b08 <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e045      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e42:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	049b      	lsls	r3, r3, #18
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x6d4>
 8001e4e:	e03d      	b.n	8001ecc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001e56:	4922      	ldr	r1, [pc, #136]	; (8001ee0 <HAL_RCC_OscConfig+0x784>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fe54 	bl	8000b08 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe fe4f 	bl	8000b08 <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e02a      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	049b      	lsls	r3, r3, #18
 8001e80:	4013      	ands	r3, r2
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x70a>
 8001e84:	e022      	b.n	8001ecc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e01d      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	025b      	lsls	r3, r3, #9
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d10f      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	23f0      	movs	r3, #240	; 0xf0
 8001eac:	039b      	lsls	r3, r3, #14
 8001eae:	401a      	ands	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	23c0      	movs	r3, #192	; 0xc0
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b00a      	add	sp, #40	; 0x28
 8001ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	ff02ffff 	.word	0xff02ffff
 8001ee0:	feffffff 	.word	0xfeffffff

08001ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b5b0      	push	{r4, r5, r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e128      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b96      	ldr	r3, [pc, #600]	; (8002154 <HAL_RCC_ClockConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d91e      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b93      	ldr	r3, [pc, #588]	; (8002154 <HAL_RCC_ClockConfig+0x270>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4393      	bics	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	4b90      	ldr	r3, [pc, #576]	; (8002154 <HAL_RCC_ClockConfig+0x270>)
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f18:	f7fe fdf6 	bl	8000b08 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7fe fdf1 	bl	8000b08 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a8a      	ldr	r2, [pc, #552]	; (8002158 <HAL_RCC_ClockConfig+0x274>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e109      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b87      	ldr	r3, [pc, #540]	; (8002154 <HAL_RCC_ClockConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1ee      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4e:	4b83      	ldr	r3, [pc, #524]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	22f0      	movs	r2, #240	; 0xf0
 8001f54:	4393      	bics	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	4b7f      	ldr	r3, [pc, #508]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2201      	movs	r2, #1
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d100      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x8a>
 8001f6c:	e089      	b.n	8002082 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f76:	4b79      	ldr	r3, [pc, #484]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d120      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0e1      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f8e:	4b73      	ldr	r3, [pc, #460]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	049b      	lsls	r3, r3, #18
 8001f96:	4013      	ands	r3, r2
 8001f98:	d114      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0d5      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2204      	movs	r2, #4
 8001fac:	4013      	ands	r3, r2
 8001fae:	d109      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0ca      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fb4:	4b69      	ldr	r3, [pc, #420]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0c2      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc4:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	4393      	bics	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4b62      	ldr	r3, [pc, #392]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fd96 	bl	8000b08 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d111      	bne.n	800200c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	e009      	b.n	8001ffe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fea:	f7fe fd8d 	bl	8000b08 <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	4a58      	ldr	r2, [pc, #352]	; (8002158 <HAL_RCC_ClockConfig+0x274>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0a5      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffe:	4b57      	ldr	r3, [pc, #348]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	220c      	movs	r2, #12
 8002004:	4013      	ands	r3, r2
 8002006:	2b08      	cmp	r3, #8
 8002008:	d1ef      	bne.n	8001fea <HAL_RCC_ClockConfig+0x106>
 800200a:	e03a      	b.n	8002082 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d111      	bne.n	8002038 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002014:	e009      	b.n	800202a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	f7fe fd77 	bl	8000b08 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_RCC_ClockConfig+0x274>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e08f      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202a:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	220c      	movs	r2, #12
 8002030:	4013      	ands	r3, r2
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d1ef      	bne.n	8002016 <HAL_RCC_ClockConfig+0x132>
 8002036:	e024      	b.n	8002082 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d11b      	bne.n	8002078 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002040:	e009      	b.n	8002056 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002042:	f7fe fd61 	bl	8000b08 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4a42      	ldr	r2, [pc, #264]	; (8002158 <HAL_RCC_ClockConfig+0x274>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e079      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	220c      	movs	r2, #12
 800205c:	4013      	ands	r3, r2
 800205e:	2b04      	cmp	r3, #4
 8002060:	d1ef      	bne.n	8002042 <HAL_RCC_ClockConfig+0x15e>
 8002062:	e00e      	b.n	8002082 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7fe fd50 	bl	8000b08 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	4a3a      	ldr	r2, [pc, #232]	; (8002158 <HAL_RCC_ClockConfig+0x274>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e068      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	220c      	movs	r2, #12
 800207e:	4013      	ands	r3, r2
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002082:	4b34      	ldr	r3, [pc, #208]	; (8002154 <HAL_RCC_ClockConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d21e      	bcs.n	80020ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_RCC_ClockConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4393      	bics	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <HAL_RCC_ClockConfig+0x270>)
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020a2:	f7fe fd31 	bl	8000b08 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	e009      	b.n	80020c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7fe fd2c 	bl	8000b08 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	4a28      	ldr	r2, [pc, #160]	; (8002158 <HAL_RCC_ClockConfig+0x274>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e044      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_RCC_ClockConfig+0x270>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d1ee      	bne.n	80020ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2204      	movs	r2, #4
 80020d4:	4013      	ands	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a20      	ldr	r2, [pc, #128]	; (8002160 <HAL_RCC_ClockConfig+0x27c>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2208      	movs	r2, #8
 80020f2:	4013      	ands	r3, r2
 80020f4:	d00a      	beq.n	800210c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_RCC_ClockConfig+0x280>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	00da      	lsls	r2, r3, #3
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800210c:	f000 f832 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8002110:	0001      	movs	r1, r0
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_RCC_ClockConfig+0x278>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	220f      	movs	r2, #15
 800211a:	4013      	ands	r3, r2
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_RCC_ClockConfig+0x284>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	000a      	movs	r2, r1
 8002122:	40da      	lsrs	r2, r3
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_ClockConfig+0x288>)
 8002126:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_ClockConfig+0x28c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	250b      	movs	r5, #11
 800212e:	197c      	adds	r4, r7, r5
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe fcb5 	bl	8000aa0 <HAL_InitTick>
 8002136:	0003      	movs	r3, r0
 8002138:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800213a:	197b      	adds	r3, r7, r5
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002142:	197b      	adds	r3, r7, r5
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	e000      	b.n	800214a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	40022000 	.word	0x40022000
 8002158:	00001388 	.word	0x00001388
 800215c:	40021000 	.word	0x40021000
 8002160:	fffff8ff 	.word	0xfffff8ff
 8002164:	ffffc7ff 	.word	0xffffc7ff
 8002168:	08003004 	.word	0x08003004
 800216c:	20000000 	.word	0x20000000
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b08e      	sub	sp, #56	; 0x38
 8002178:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800217a:	4b4c      	ldr	r3, [pc, #304]	; (80022ac <HAL_RCC_GetSysClockFreq+0x138>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002182:	230c      	movs	r3, #12
 8002184:	4013      	ands	r3, r2
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d014      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x40>
 800218a:	d900      	bls.n	800218e <HAL_RCC_GetSysClockFreq+0x1a>
 800218c:	e07b      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x112>
 800218e:	2b04      	cmp	r3, #4
 8002190:	d002      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x24>
 8002192:	2b08      	cmp	r3, #8
 8002194:	d00b      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x3a>
 8002196:	e076      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002198:	4b44      	ldr	r3, [pc, #272]	; (80022ac <HAL_RCC_GetSysClockFreq+0x138>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4013      	ands	r3, r2
 80021a0:	d002      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80021a6:	e07c      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80021a8:	4b42      	ldr	r3, [pc, #264]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x140>)
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021ac:	e079      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021ae:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x144>)
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021b2:	e076      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	0c9a      	lsrs	r2, r3, #18
 80021b8:	230f      	movs	r3, #15
 80021ba:	401a      	ands	r2, r3
 80021bc:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <HAL_RCC_GetSysClockFreq+0x148>)
 80021be:	5c9b      	ldrb	r3, [r3, r2]
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	0d9a      	lsrs	r2, r3, #22
 80021c6:	2303      	movs	r3, #3
 80021c8:	4013      	ands	r3, r2
 80021ca:	3301      	adds	r3, #1
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_RCC_GetSysClockFreq+0x138>)
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	025b      	lsls	r3, r3, #9
 80021d6:	4013      	ands	r3, r2
 80021d8:	d01a      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	4a35      	ldr	r2, [pc, #212]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x144>)
 80021e4:	2300      	movs	r3, #0
 80021e6:	69b8      	ldr	r0, [r7, #24]
 80021e8:	69f9      	ldr	r1, [r7, #28]
 80021ea:	f7fe f839 	bl	8000260 <__aeabi_lmul>
 80021ee:	0002      	movs	r2, r0
 80021f0:	000b      	movs	r3, r1
 80021f2:	0010      	movs	r0, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f7fe f80d 	bl	8000220 <__aeabi_uldivmod>
 8002206:	0002      	movs	r2, r0
 8002208:	000b      	movs	r3, r1
 800220a:	0013      	movs	r3, r2
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
 800220e:	e037      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002210:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_RCC_GetSysClockFreq+0x138>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2210      	movs	r2, #16
 8002216:	4013      	ands	r3, r2
 8002218:	d01a      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002224:	2300      	movs	r3, #0
 8002226:	68b8      	ldr	r0, [r7, #8]
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	f7fe f819 	bl	8000260 <__aeabi_lmul>
 800222e:	0002      	movs	r2, r0
 8002230:	000b      	movs	r3, r1
 8002232:	0010      	movs	r0, r2
 8002234:	0019      	movs	r1, r3
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f7fd ffed 	bl	8000220 <__aeabi_uldivmod>
 8002246:	0002      	movs	r2, r0
 8002248:	000b      	movs	r3, r1
 800224a:	0013      	movs	r3, r2
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
 800224e:	e017      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	0018      	movs	r0, r3
 8002254:	2300      	movs	r3, #0
 8002256:	0019      	movs	r1, r3
 8002258:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x140>)
 800225a:	2300      	movs	r3, #0
 800225c:	f7fe f800 	bl	8000260 <__aeabi_lmul>
 8002260:	0002      	movs	r2, r0
 8002262:	000b      	movs	r3, r1
 8002264:	0010      	movs	r0, r2
 8002266:	0019      	movs	r1, r3
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	001c      	movs	r4, r3
 800226c:	2300      	movs	r3, #0
 800226e:	001d      	movs	r5, r3
 8002270:	0022      	movs	r2, r4
 8002272:	002b      	movs	r3, r5
 8002274:	f7fd ffd4 	bl	8000220 <__aeabi_uldivmod>
 8002278:	0002      	movs	r2, r0
 800227a:	000b      	movs	r3, r1
 800227c:	0013      	movs	r3, r2
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002284:	e00d      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RCC_GetSysClockFreq+0x138>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0b5b      	lsrs	r3, r3, #13
 800228c:	2207      	movs	r2, #7
 800228e:	4013      	ands	r3, r2
 8002290:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	3301      	adds	r3, #1
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	0212      	lsls	r2, r2, #8
 800229a:	409a      	lsls	r2, r3
 800229c:	0013      	movs	r3, r2
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022a0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b00e      	add	sp, #56	; 0x38
 80022aa:	bdb0      	pop	{r4, r5, r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	003d0900 	.word	0x003d0900
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	007a1200 	.word	0x007a1200
 80022bc:	08003014 	.word	0x08003014

080022c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e032      	b.n	8002338 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2239      	movs	r2, #57	; 0x39
 80022d6:	5c9b      	ldrb	r3, [r3, r2]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d107      	bne.n	80022ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2238      	movs	r2, #56	; 0x38
 80022e2:	2100      	movs	r1, #0
 80022e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7fe faff 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2239      	movs	r2, #57	; 0x39
 80022f2:	2102      	movs	r1, #2
 80022f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	0019      	movs	r1, r3
 8002300:	0010      	movs	r0, r2
 8002302:	f000 fbd9 	bl	8002ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223e      	movs	r2, #62	; 0x3e
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	223a      	movs	r2, #58	; 0x3a
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223b      	movs	r2, #59	; 0x3b
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	223c      	movs	r2, #60	; 0x3c
 8002322:	2101      	movs	r1, #1
 8002324:	5499      	strb	r1, [r3, r2]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	223d      	movs	r2, #61	; 0x3d
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2239      	movs	r2, #57	; 0x39
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e032      	b.n	80023b8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2239      	movs	r2, #57	; 0x39
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d107      	bne.n	800236e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2238      	movs	r2, #56	; 0x38
 8002362:	2100      	movs	r1, #0
 8002364:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0018      	movs	r0, r3
 800236a:	f000 f829 	bl	80023c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2239      	movs	r2, #57	; 0x39
 8002372:	2102      	movs	r1, #2
 8002374:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3304      	adds	r3, #4
 800237e:	0019      	movs	r1, r3
 8002380:	0010      	movs	r0, r2
 8002382:	f000 fb99 	bl	8002ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	223e      	movs	r2, #62	; 0x3e
 800238a:	2101      	movs	r1, #1
 800238c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	223a      	movs	r2, #58	; 0x3a
 8002392:	2101      	movs	r1, #1
 8002394:	5499      	strb	r1, [r3, r2]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	223b      	movs	r2, #59	; 0x3b
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	223c      	movs	r2, #60	; 0x3c
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	223d      	movs	r2, #61	; 0x3d
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2239      	movs	r2, #57	; 0x39
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	230f      	movs	r3, #15
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d108      	bne.n	80023fa <HAL_TIM_PWM_Start_IT+0x2a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	223a      	movs	r2, #58	; 0x3a
 80023ec:	5c9b      	ldrb	r3, [r3, r2]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	4193      	sbcs	r3, r2
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	e01f      	b.n	800243a <HAL_TIM_PWM_Start_IT+0x6a>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d108      	bne.n	8002412 <HAL_TIM_PWM_Start_IT+0x42>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	223b      	movs	r2, #59	; 0x3b
 8002404:	5c9b      	ldrb	r3, [r3, r2]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	1e5a      	subs	r2, r3, #1
 800240c:	4193      	sbcs	r3, r2
 800240e:	b2db      	uxtb	r3, r3
 8002410:	e013      	b.n	800243a <HAL_TIM_PWM_Start_IT+0x6a>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d108      	bne.n	800242a <HAL_TIM_PWM_Start_IT+0x5a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	223c      	movs	r2, #60	; 0x3c
 800241c:	5c9b      	ldrb	r3, [r3, r2]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	1e5a      	subs	r2, r3, #1
 8002424:	4193      	sbcs	r3, r2
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e007      	b.n	800243a <HAL_TIM_PWM_Start_IT+0x6a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223d      	movs	r2, #61	; 0x3d
 800242e:	5c9b      	ldrb	r3, [r3, r2]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	1e5a      	subs	r2, r3, #1
 8002436:	4193      	sbcs	r3, r2
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e090      	b.n	8002564 <HAL_TIM_PWM_Start_IT+0x194>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_TIM_PWM_Start_IT+0x82>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	223a      	movs	r2, #58	; 0x3a
 800244c:	2102      	movs	r1, #2
 800244e:	5499      	strb	r1, [r3, r2]
 8002450:	e013      	b.n	800247a <HAL_TIM_PWM_Start_IT+0xaa>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d104      	bne.n	8002462 <HAL_TIM_PWM_Start_IT+0x92>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	223b      	movs	r2, #59	; 0x3b
 800245c:	2102      	movs	r1, #2
 800245e:	5499      	strb	r1, [r3, r2]
 8002460:	e00b      	b.n	800247a <HAL_TIM_PWM_Start_IT+0xaa>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d104      	bne.n	8002472 <HAL_TIM_PWM_Start_IT+0xa2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	223c      	movs	r2, #60	; 0x3c
 800246c:	2102      	movs	r1, #2
 800246e:	5499      	strb	r1, [r3, r2]
 8002470:	e003      	b.n	800247a <HAL_TIM_PWM_Start_IT+0xaa>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	223d      	movs	r2, #61	; 0x3d
 8002476:	2102      	movs	r1, #2
 8002478:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d02a      	beq.n	80024d6 <HAL_TIM_PWM_Start_IT+0x106>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d830      	bhi.n	80024e8 <HAL_TIM_PWM_Start_IT+0x118>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d01b      	beq.n	80024c4 <HAL_TIM_PWM_Start_IT+0xf4>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b08      	cmp	r3, #8
 8002490:	d82a      	bhi.n	80024e8 <HAL_TIM_PWM_Start_IT+0x118>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_TIM_PWM_Start_IT+0xd0>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b04      	cmp	r3, #4
 800249c:	d009      	beq.n	80024b2 <HAL_TIM_PWM_Start_IT+0xe2>
 800249e:	e023      	b.n	80024e8 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2102      	movs	r1, #2
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]
      break;
 80024b0:	e01f      	b.n	80024f2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2104      	movs	r1, #4
 80024be:	430a      	orrs	r2, r1
 80024c0:	60da      	str	r2, [r3, #12]
      break;
 80024c2:	e016      	b.n	80024f2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2108      	movs	r1, #8
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]
      break;
 80024d4:	e00d      	b.n	80024f2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2110      	movs	r1, #16
 80024e2:	430a      	orrs	r2, r1
 80024e4:	60da      	str	r2, [r3, #12]
      break;
 80024e6:	e004      	b.n	80024f2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 80024e8:	230f      	movs	r3, #15
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
      break;
 80024f0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80024f2:	230f      	movs	r3, #15
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d130      	bne.n	800255e <HAL_TIM_PWM_Start_IT+0x18e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	0018      	movs	r0, r3
 8002506:	f000 fcc9 	bl	8002e9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	05db      	lsls	r3, r3, #23
 8002512:	429a      	cmp	r2, r3
 8002514:	d009      	beq.n	800252a <HAL_TIM_PWM_Start_IT+0x15a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_TIM_PWM_Start_IT+0x19c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_TIM_PWM_Start_IT+0x15a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a12      	ldr	r2, [pc, #72]	; (8002570 <HAL_TIM_PWM_Start_IT+0x1a0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d111      	bne.n	800254e <HAL_TIM_PWM_Start_IT+0x17e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2207      	movs	r2, #7
 8002532:	4013      	ands	r3, r2
 8002534:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b06      	cmp	r3, #6
 800253a:	d010      	beq.n	800255e <HAL_TIM_PWM_Start_IT+0x18e>
      {
        __HAL_TIM_ENABLE(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254c:	e007      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x18e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800255e:	230f      	movs	r3, #15
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	781b      	ldrb	r3, [r3, #0]
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40010800 	.word	0x40010800
 8002570:	40011400 	.word	0x40011400

08002574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2202      	movs	r2, #2
 8002584:	4013      	ands	r3, r2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d124      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2202      	movs	r2, #2
 8002592:	4013      	ands	r3, r2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d11d      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2203      	movs	r2, #3
 800259e:	4252      	negs	r2, r2
 80025a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2203      	movs	r2, #3
 80025b0:	4013      	ands	r3, r2
 80025b2:	d004      	beq.n	80025be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 fa66 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e007      	b.n	80025ce <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 fa59 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fa65 	bl	8002a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2204      	movs	r2, #4
 80025dc:	4013      	ands	r3, r2
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d125      	bne.n	800262e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2204      	movs	r2, #4
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d11e      	bne.n	800262e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2205      	movs	r2, #5
 80025f6:	4252      	negs	r2, r2
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2202      	movs	r2, #2
 80025fe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	23c0      	movs	r3, #192	; 0xc0
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4013      	ands	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	0018      	movs	r0, r3
 8002612:	f000 fa39 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 8002616:	e007      	b.n	8002628 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fa2c 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 fa38 	bl	8002a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2208      	movs	r2, #8
 8002636:	4013      	ands	r3, r2
 8002638:	2b08      	cmp	r3, #8
 800263a:	d124      	bne.n	8002686 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2208      	movs	r2, #8
 8002644:	4013      	ands	r3, r2
 8002646:	2b08      	cmp	r3, #8
 8002648:	d11d      	bne.n	8002686 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2209      	movs	r2, #9
 8002650:	4252      	negs	r2, r2
 8002652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2204      	movs	r2, #4
 8002658:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2203      	movs	r2, #3
 8002662:	4013      	ands	r3, r2
 8002664:	d004      	beq.n	8002670 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fa0d 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 800266e:	e007      	b.n	8002680 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fa00 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 fa0c 	bl	8002a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2210      	movs	r2, #16
 800268e:	4013      	ands	r3, r2
 8002690:	2b10      	cmp	r3, #16
 8002692:	d125      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2210      	movs	r2, #16
 800269c:	4013      	ands	r3, r2
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d11e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2211      	movs	r2, #17
 80026a8:	4252      	negs	r2, r2
 80026aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2208      	movs	r2, #8
 80026b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	23c0      	movs	r3, #192	; 0xc0
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f9e0 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 80026c8:	e007      	b.n	80026da <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 f9d3 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f9df 	bl	8002a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10f      	bne.n	800270e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d108      	bne.n	800270e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2202      	movs	r2, #2
 8002702:	4252      	negs	r2, r2
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f7fd ff0d 	bl	8000528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2240      	movs	r2, #64	; 0x40
 8002716:	4013      	ands	r3, r2
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d10f      	bne.n	800273c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	4013      	ands	r3, r2
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d108      	bne.n	800273c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2241      	movs	r2, #65	; 0x41
 8002730:	4252      	negs	r2, r2
 8002732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f9b6 	bl	8002aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002750:	2317      	movs	r3, #23
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2238      	movs	r2, #56	; 0x38
 800275c:	5c9b      	ldrb	r3, [r3, r2]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002762:	2302      	movs	r3, #2
 8002764:	e0ad      	b.n	80028c2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2238      	movs	r2, #56	; 0x38
 800276a:	2101      	movs	r1, #1
 800276c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d100      	bne.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002774:	e076      	b.n	8002864 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	d900      	bls.n	800277e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800277c:	e095      	b.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d04e      	beq.n	8002822 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d900      	bls.n	800278c <HAL_TIM_PWM_ConfigChannel+0x48>
 800278a:	e08e      	b.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d021      	beq.n	80027dc <HAL_TIM_PWM_ConfigChannel+0x98>
 8002798:	e087      	b.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	0011      	movs	r1, r2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 f9dc 	bl	8002b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2108      	movs	r1, #8
 80027b4:	430a      	orrs	r2, r1
 80027b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2104      	movs	r1, #4
 80027c4:	438a      	bics	r2, r1
 80027c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6999      	ldr	r1, [r3, #24]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	619a      	str	r2, [r3, #24]
      break;
 80027da:	e06b      	b.n	80028b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 f9f7 	bl	8002bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	0109      	lsls	r1, r1, #4
 80027f8:	430a      	orrs	r2, r1
 80027fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4931      	ldr	r1, [pc, #196]	; (80028cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002808:	400a      	ands	r2, r1
 800280a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6999      	ldr	r1, [r3, #24]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	021a      	lsls	r2, r3, #8
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	619a      	str	r2, [r3, #24]
      break;
 8002820:	e048      	b.n	80028b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	0011      	movs	r1, r2
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fa16 	bl	8002c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2108      	movs	r1, #8
 800283c:	430a      	orrs	r2, r1
 800283e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2104      	movs	r1, #4
 800284c:	438a      	bics	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	69d9      	ldr	r1, [r3, #28]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	61da      	str	r2, [r3, #28]
      break;
 8002862:	e027      	b.n	80028b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	0011      	movs	r1, r2
 800286c:	0018      	movs	r0, r3
 800286e:	f000 fa35 	bl	8002cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0109      	lsls	r1, r1, #4
 8002880:	430a      	orrs	r2, r1
 8002882:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	490f      	ldr	r1, [pc, #60]	; (80028cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002890:	400a      	ands	r2, r1
 8002892:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69d9      	ldr	r1, [r3, #28]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	021a      	lsls	r2, r3, #8
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	61da      	str	r2, [r3, #28]
      break;
 80028a8:	e004      	b.n	80028b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80028aa:	2317      	movs	r3, #23
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
      break;
 80028b2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2238      	movs	r2, #56	; 0x38
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]

  return status;
 80028bc:	2317      	movs	r3, #23
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	781b      	ldrb	r3, [r3, #0]
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b006      	add	sp, #24
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	fffffbff 	.word	0xfffffbff

080028d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	230f      	movs	r3, #15
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2238      	movs	r2, #56	; 0x38
 80028e6:	5c9b      	ldrb	r3, [r3, r2]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_TIM_ConfigClockSource+0x20>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e0bc      	b.n	8002a6a <HAL_TIM_ConfigClockSource+0x19a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2238      	movs	r2, #56	; 0x38
 80028f4:	2101      	movs	r1, #1
 80028f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2239      	movs	r2, #57	; 0x39
 80028fc:	2102      	movs	r1, #2
 80028fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2277      	movs	r2, #119	; 0x77
 800290c:	4393      	bics	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	0192      	lsls	r2, r2, #6
 8002928:	4293      	cmp	r3, r2
 800292a:	d040      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xde>
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	0192      	lsls	r2, r2, #6
 8002930:	4293      	cmp	r3, r2
 8002932:	d900      	bls.n	8002936 <HAL_TIM_ConfigClockSource+0x66>
 8002934:	e088      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	0152      	lsls	r2, r2, #5
 800293a:	4293      	cmp	r3, r2
 800293c:	d100      	bne.n	8002940 <HAL_TIM_ConfigClockSource+0x70>
 800293e:	e088      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x182>
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	0152      	lsls	r2, r2, #5
 8002944:	4293      	cmp	r3, r2
 8002946:	d900      	bls.n	800294a <HAL_TIM_ConfigClockSource+0x7a>
 8002948:	e07e      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 800294a:	2b70      	cmp	r3, #112	; 0x70
 800294c:	d018      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0xb0>
 800294e:	d900      	bls.n	8002952 <HAL_TIM_ConfigClockSource+0x82>
 8002950:	e07a      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002952:	2b60      	cmp	r3, #96	; 0x60
 8002954:	d04f      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x126>
 8002956:	d900      	bls.n	800295a <HAL_TIM_ConfigClockSource+0x8a>
 8002958:	e076      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 800295a:	2b50      	cmp	r3, #80	; 0x50
 800295c:	d03b      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x106>
 800295e:	d900      	bls.n	8002962 <HAL_TIM_ConfigClockSource+0x92>
 8002960:	e072      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d057      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x146>
 8002966:	d900      	bls.n	800296a <HAL_TIM_ConfigClockSource+0x9a>
 8002968:	e06e      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 800296a:	2b30      	cmp	r3, #48	; 0x30
 800296c:	d063      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 800296e:	d86b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002970:	2b20      	cmp	r3, #32
 8002972:	d060      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 8002974:	d868      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d05d      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 800297a:	2b10      	cmp	r3, #16
 800297c:	d05b      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 800297e:	e063      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f000 fa64 	bl	8002e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]
      break;
 80029ac:	e052      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f000 fa4d 	bl	8002e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	01c9      	lsls	r1, r1, #7
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
      break;
 80029d4:	e03e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	001a      	movs	r2, r3
 80029e4:	f000 f9c0 	bl	8002d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2150      	movs	r1, #80	; 0x50
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 fa1a 	bl	8002e28 <TIM_ITRx_SetConfig>
      break;
 80029f4:	e02e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	001a      	movs	r2, r3
 8002a04:	f000 f9de 	bl	8002dc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2160      	movs	r1, #96	; 0x60
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 fa0a 	bl	8002e28 <TIM_ITRx_SetConfig>
      break;
 8002a14:	e01e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	001a      	movs	r2, r3
 8002a24:	f000 f9a0 	bl	8002d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2140      	movs	r1, #64	; 0x40
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f9fa 	bl	8002e28 <TIM_ITRx_SetConfig>
      break;
 8002a34:	e00e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f000 f9f1 	bl	8002e28 <TIM_ITRx_SetConfig>
      break;
 8002a46:	e005      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a48:	230f      	movs	r3, #15
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
      break;
 8002a50:	e000      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a52:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2239      	movs	r2, #57	; 0x39
 8002a58:	2101      	movs	r1, #1
 8002a5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2238      	movs	r2, #56	; 0x38
 8002a60:	2100      	movs	r1, #0
 8002a62:	5499      	strb	r1, [r3, r2]

  return status;
 8002a64:	230f      	movs	r3, #15
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	781b      	ldrb	r3, [r3, #0]
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	ffff00ff 	.word	0xffff00ff

08002a78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b002      	add	sp, #8
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	05db      	lsls	r3, r3, #23
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d007      	beq.n	8002ae2 <TIM_Base_SetConfig+0x2a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <TIM_Base_SetConfig+0x9c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <TIM_Base_SetConfig+0x2a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <TIM_Base_SetConfig+0xa0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d108      	bne.n	8002af4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2270      	movs	r2, #112	; 0x70
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	05db      	lsls	r3, r3, #23
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d007      	beq.n	8002b0e <TIM_Base_SetConfig+0x56>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <TIM_Base_SetConfig+0x9c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_Base_SetConfig+0x56>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <TIM_Base_SetConfig+0xa0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <TIM_Base_SetConfig+0xa4>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	4393      	bics	r3, r2
 8002b26:	001a      	movs	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	615a      	str	r2, [r3, #20]
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b004      	add	sp, #16
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40010800 	.word	0x40010800
 8002b58:	40011400 	.word	0x40011400
 8002b5c:	fffffcff 	.word	0xfffffcff

08002b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4393      	bics	r3, r2
 8002b72:	001a      	movs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2270      	movs	r2, #112	; 0x70
 8002b8e:	4393      	bics	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2203      	movs	r2, #3
 8002b96:	4393      	bics	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4393      	bics	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	621a      	str	r2, [r3, #32]
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b006      	add	sp, #24
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	2210      	movs	r2, #16
 8002be8:	4393      	bics	r3, r2
 8002bea:	001a      	movs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <TIM_OC2_SetConfig+0x7c>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <TIM_OC2_SetConfig+0x80>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2220      	movs	r2, #32
 8002c22:	4393      	bics	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	621a      	str	r2, [r3, #32]
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b006      	add	sp, #24
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	ffff8fff 	.word	0xffff8fff
 8002c58:	fffffcff 	.word	0xfffffcff

08002c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <TIM_OC3_SetConfig+0x78>)
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2270      	movs	r2, #112	; 0x70
 8002c88:	4393      	bics	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	4393      	bics	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <TIM_OC3_SetConfig+0x7c>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	621a      	str	r2, [r3, #32]
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b006      	add	sp, #24
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	fffffeff 	.word	0xfffffeff
 8002cd8:	fffffdff 	.word	0xfffffdff

08002cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <TIM_OC4_SetConfig+0x7c>)
 8002cec:	401a      	ands	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <TIM_OC4_SetConfig+0x80>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <TIM_OC4_SetConfig+0x84>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <TIM_OC4_SetConfig+0x88>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	031b      	lsls	r3, r3, #12
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	621a      	str	r2, [r3, #32]
}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b006      	add	sp, #24
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	ffffefff 	.word	0xffffefff
 8002d5c:	ffff8fff 	.word	0xffff8fff
 8002d60:	fffffcff 	.word	0xfffffcff
 8002d64:	ffffdfff 	.word	0xffffdfff

08002d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4393      	bics	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	22f0      	movs	r2, #240	; 0xf0
 8002d92:	4393      	bics	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	220a      	movs	r2, #10
 8002da4:	4393      	bics	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	621a      	str	r2, [r3, #32]
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b006      	add	sp, #24
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	4393      	bics	r3, r2
 8002dd8:	001a      	movs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <TIM_TI2_ConfigInputStage+0x60>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	031b      	lsls	r3, r3, #12
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	22a0      	movs	r2, #160	; 0xa0
 8002e00:	4393      	bics	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b006      	add	sp, #24
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	ffff0fff 	.word	0xffff0fff

08002e28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2270      	movs	r2, #112	; 0x70
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	2207      	movs	r2, #7
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	609a      	str	r2, [r3, #8]
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b004      	add	sp, #16
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <TIM_ETR_SetConfig+0x3c>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	021a      	lsls	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b006      	add	sp, #24
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	ffff00ff 	.word	0xffff00ff

08002e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	221f      	movs	r2, #31
 8002eac:	4013      	ands	r3, r2
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	0013      	movs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	43d2      	mvns	r2, r2
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	211f      	movs	r1, #31
 8002ecc:	400b      	ands	r3, r1
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4099      	lsls	r1, r3
 8002ed2:	000b      	movs	r3, r1
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b006      	add	sp, #24
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2238      	movs	r2, #56	; 0x38
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e042      	b.n	8002f82 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2238      	movs	r2, #56	; 0x38
 8002f00:	2101      	movs	r1, #1
 8002f02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2239      	movs	r2, #57	; 0x39
 8002f08:	2102      	movs	r1, #2
 8002f0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2270      	movs	r2, #112	; 0x70
 8002f20:	4393      	bics	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d009      	beq.n	8002f56 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10c      	bne.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2239      	movs	r2, #57	; 0x39
 8002f74:	2101      	movs	r1, #1
 8002f76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2238      	movs	r2, #56	; 0x38
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	40010800 	.word	0x40010800
 8002f90:	40011400 	.word	0x40011400

08002f94 <__libc_init_array>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	2600      	movs	r6, #0
 8002f98:	4d0c      	ldr	r5, [pc, #48]	; (8002fcc <__libc_init_array+0x38>)
 8002f9a:	4c0d      	ldr	r4, [pc, #52]	; (8002fd0 <__libc_init_array+0x3c>)
 8002f9c:	1b64      	subs	r4, r4, r5
 8002f9e:	10a4      	asrs	r4, r4, #2
 8002fa0:	42a6      	cmp	r6, r4
 8002fa2:	d109      	bne.n	8002fb8 <__libc_init_array+0x24>
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	f000 f821 	bl	8002fec <_init>
 8002faa:	4d0a      	ldr	r5, [pc, #40]	; (8002fd4 <__libc_init_array+0x40>)
 8002fac:	4c0a      	ldr	r4, [pc, #40]	; (8002fd8 <__libc_init_array+0x44>)
 8002fae:	1b64      	subs	r4, r4, r5
 8002fb0:	10a4      	asrs	r4, r4, #2
 8002fb2:	42a6      	cmp	r6, r4
 8002fb4:	d105      	bne.n	8002fc2 <__libc_init_array+0x2e>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	00b3      	lsls	r3, r6, #2
 8002fba:	58eb      	ldr	r3, [r5, r3]
 8002fbc:	4798      	blx	r3
 8002fbe:	3601      	adds	r6, #1
 8002fc0:	e7ee      	b.n	8002fa0 <__libc_init_array+0xc>
 8002fc2:	00b3      	lsls	r3, r6, #2
 8002fc4:	58eb      	ldr	r3, [r5, r3]
 8002fc6:	4798      	blx	r3
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7f2      	b.n	8002fb2 <__libc_init_array+0x1e>
 8002fcc:	08003028 	.word	0x08003028
 8002fd0:	08003028 	.word	0x08003028
 8002fd4:	08003028 	.word	0x08003028
 8002fd8:	0800302c 	.word	0x0800302c

08002fdc <memset>:
 8002fdc:	0003      	movs	r3, r0
 8002fde:	1882      	adds	r2, r0, r2
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d100      	bne.n	8002fe6 <memset+0xa>
 8002fe4:	4770      	bx	lr
 8002fe6:	7019      	strb	r1, [r3, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	e7f9      	b.n	8002fe0 <memset+0x4>

08002fec <_init>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_fini>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr
